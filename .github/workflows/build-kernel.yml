name: Build Kernel
on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    env:
      KERNEL_WORKSPACE: ${{ github.workspace }}/kernel_workspace

    steps:
    - uses: actions/checkout@v4

    - name: Parse Configuration
      id: config
      run: |
        # 使用更稳健的变量解析方法
        while IFS='=' read -r key value; do
          if [[ $key == [A-Z]* ]]; then
            echo "${key}=${value}" >> $GITHUB_ENV
          fi
        done < <(grep -vE '^#|^$' config.env)

    - name: Setup Build Environment
      run: |
        # 添加时间戳和清理目录
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date '+%Y%m%d-%H%M')" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_DEFCONFIG }} | sed -E 's!vendor/|(_defconfig|_user|-perf)!!g')" >> $GITHUB_ENV
        
        # 安装必要依赖项
        sudo apt-get update
        sudo apt-get install -y \
          git ccache automake flex lzop bison gperf build-essential zip curl \
          zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev squashfs-tools \
          pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev \
          libswitch-perl policycoreutils minicom bc libc6-dev-i386 lib32ncurses5-dev \
          libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler \
          python2 python3 default-jdk

        # 创建工作目录
        mkdir -p ${{ env.KERNEL_WORKSPACE }}
        [ -d "${{ env.KERNEL_WORKSPACE }}" ] || exit 1

    - name: Setup Toolchains
      run: |
        cd ${{ env.KERNEL_WORKSPACE }}
        
        # 下载并验证Clang
        clang_url="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master-kernel-build-2022/clang-${{ env.CLANG_VERSION }}.tar.gz"
        wget -q --show-progress -O clang.tar.gz "$clang_url"
        mkdir -p clang && tar xzf clang.tar.gz -C clang || exit 1

        # 下载GCC工具链
        declare -A toolchains=(
          ["gcc-aosp"]="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/+archive/android-12.1.0_r27.tar.gz"
          ["gcc32-aosp"]="https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/+archive/android-12.1.0_r27.tar.gz"
        )
        for dir in "${!toolchains[@]}"; do
          mkdir -p $dir
          wget -q --show-progress -O "${dir}.tar.gz" "${toolchains[$dir]}" 
          tar xzf "${dir}.tar.gz" -C "$dir" || exit 1
        done

    - name: Prepare Boot Tools
      if: ${{ env.MAKE_BOOT_IMAGE == 'true' || env.BOOT_SIGNATURE == 'true' }}
      run: |
        cd ${{ env.KERNEL_WORKSPACE }}
        
        # 使用并行下载
        (
          if [ "${{ env.MAKE_BOOT_IMAGE }}" = "true" ]; then
            git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1
          fi
        ) &
        
        (
          if [ "${{ env.BOOT_SIGNATURE }}" = "true" ]; then
            git clone https://github.com/kindle4jerry/boot_signer_for_nubia_nx563j bootsigner -b main --depth=1
          fi
        ) &
        
        wait

    - name: Clone Kernel Source
      run: |
        cd ${{ env.KERNEL_WORKSPACE}}
        git clone --depth=1 --branch "${{ env.KERNEL_SOURCE_BRANCH }}" "${{ env.KERNEL_SOURCE }}" android-kernel
        [ -d "android-kernel" ] || { echo "❌ Kernel source clone failed"; exit 1; }

    - name: Handle Boot Image
      if: ${{ env.MAKE_BOOT_IMAGE == 'true' }}
      run: |
        cd ${{ env.KERNEL_WORKSPACE}}
        wget -q --show-progress -O boot-source.img "${{ env.SOURCE_BOOT_IMAGE}}"
        
        if [ ! -f "boot-source.img" ]; then
          echo "::error ::Boot image download failed"
          exit 1
        fi
        
        # 提取引导参数
        mkdir -p boot-unpacked
        python3 tools/unpack_bootimg.py --boot_img boot-source.img --out boot-unpacked
        echo "FORMAT_MKBOOTING=$(grep 'mkbootimg_args' boot-unpacked/header | cut -d= -f2)" >> $GITHUB_ENV

    - name: Apply KernelSU
      if: ${{ env.USE_KERNELSU == 'true' }}
      run: |
        cd ${{ env.KERNEL_WORKSPACE}}/android-kernel
        curl -sLS https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh | bash -s main
        echo "BUILD_TAG=+KSU" >> $GITHUB_ENV

    - name: Compile Kernel
      env:
        MAKE_FLAGS: "-j$(($(nproc) + 1))"
      run: |
        cd ${{ env.KERNEL_WORKSPACE}}/android-kernel
        
        export PATH="${{ env.KERNEL_WORKSPACE}}/clang/bin:$PATH"
        export KBUILD_BUILD_VERSION="1.0.0"
        export KBUILD_BUILD_TIMESTAMP=$(date +%s)
        
        # 配置编译环境
        make O=out ARCH=${{ env.TARGET_ARCH }} \
          CC="clang" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=${{ env.KERNEL_WORKSPACE }}/gcc-aosp/bin/aarch64-linux-android- \
          CROSS_COMPILE_ARM32=${{ env.KERNEL_WORKSPACE }}/gcc32-aosp/bin/arm-linux-androideabi- \
          LD=ld.lld \
          ${{ env.BUILD_EXTRA_COMMAND }} \
          ${{ env.KERNEL_DEFCONFIG }}

        # 执行编译
        make O=out ARCH=${{ env.TARGET_ARCH }} \
          ${{ env.MAKE_FLAGS }} \
          CC="clang" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=${{ env.KERNEL_WORKSPACE }}/gcc-aosp/bin/aarch64-linux-android- \
          CROSS_COMPILE_ARM32=${{ env.KERNEL_WORKSPACE }}/gcc32-aosp/bin/arm-linux-androideabi- \
          LD=ld.lld \
          ${{ env.BUILD_EXTRA_COMMAND }}

        # 验证编译产物
        [ -f "out/arch/${{ env.TARGET_ARCH }}/boot/${{ env.KERNEL_FILE }}" ] || { echo "❌ Kernel build failed"; exit 1; }

    - name: Package Boot Images
      if: ${{ env.MAKE_BOOT_IMAGE == 'true' }}
      run: |
        cd ${{ env.KERNEL_WORKSPACE}}
        KERNEL_IMAGE="android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/${{ env.KERNEL_FILE}}"
        
        # 生成标准引导镜像
        python3 tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} \
          --kernel "$KERNEL_IMAGE" \
          -o boot-unsigned.img
          
        # 生成调试版引导镜像
        python3 tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} \
          --kernel "$KERNEL_IMAGE" \
          --ramdisk boot-unpacked/ramdisk \
          --cmdline "$(echo ${{ env.FORMAT_MKBOOTING }} | grep -o '--cmdline [^ ]*' | cut -d' ' -f2) androidboot.selinux=permissive" \
          -o boot-permissive-unsigned.img

    - name: Sign Boot Images
      if: ${{ env.BOOT_SIGNATURE == 'true' }}
      run: |
        cd ${{ env.KERNEL_WORKSPACE}}
        
        # 签名标准镜像
        java -jar bootsigner/boot_signer.jar \
          /boot boot-unsigned.img \
          bootsigner/verity.pk8 bootsigner/verity.x509.pem \
          boot-${{ env.DEVICE }}.img
          
        # 签名调试镜像
        java -jar bootsigner/boot_signer.jar \
          /boot boot-permissive-unsigned.img \
          bootsigner/verity.pk8 bootsigner/verity.x509.pem \
          boot-${{ env.DEVICE }}-permissive.img
          
        # 验证签名
        for img in boot-*.img; do
          if ! java -jar bootsigner/boot_signer.jar -verify $img | grep -q "VALID"; then
            echo "::error ::Invalid signature for $img"
            exit 1
          fi
        done

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-${{ env.DEVICE }}-${{ env.BUILD_TIME }}${{ env.BUILD_TAG }}
        path: |
          ${{ env.KERNEL_WORKSPACE }}/android-kernel/out/arch/${{ env.TARGET_ARCH }}/boot/${{ env.KERNEL_FILE }}
          ${{ env.KERNEL_WORKSPACE }}/boot-*.img
        compression-level: 9
        if-no-files-found: error
