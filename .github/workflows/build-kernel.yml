name: Kernel Builder
on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode'
        required: false
        default: 'false'

env:
  KERNEL_DIR: ${{ github.workspace }}/kernel
  TOOLCHAIN_DIR: ${{ github.workspace }}/toolchains
  ARTIFACT_NAME: kernel-${{ github.run_number }}

jobs:
  build:
    name: Kernel Builder
    runs-on: ubuntu-24.04
    timeout-minutes: 120

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    - name: Validate Configuration
      id: config-validation
      run: |
        # 严格验证配置文件格式
        set -eo pipefail
        required_vars=(
          "KERNEL_SOURCE" 
          "KERNEL_DEFCONFIG"
          "CLANG_VERSION"
          "TARGET_ARCH"
        )

        while IFS='=' read -r key value; do
          key=$(echo $key | tr -d '[:space:]')
          if [[ " ${required_vars[@]} " =~ " $key " ]]; then
            if [[ -z "${value}" ]]; then
              echo "::error ::Empty value for required variable: $key"
              exit 101
            fi
            echo "$key=${value//\"/}" >> $GITHUB_ENV
          fi
        done < <(grep -vE '^#|^$' config.env | sed 's/^[ \t]*//;s/[ \t]*$//')

        # 验证defconfig存在性
        if ! grep -q "CONFIG_EMBEDDED=y" configs/${{ env.KERNEL_DEFCONFIG }}; then
          echo "::error ::Invalid defconfig file"
          exit 102
        fi

    - name: Setup Build Environment
      run: |
        set -x
        sudo apt-get update
        # 安装完整编译依赖
        sudo apt-get install -y \
          build-essential libncurses-dev bison flex libssl-dev \
          libelf-dev dwarves zlib1g-dev python3-pip \
          device-tree-compiler lzop gcc-multilib git-lfs \
          jq xmlstarlet cpio bc rsync kmod

        # 配置交换空间防止OOM
        sudo fallocate -l 8G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile

        # 配置缓存目录
        mkdir -p ${{ env.TOOLCHAIN_DIR }}
        sudo mount -t tmpfs -o size=8G tmpfs ${{ env.TOOLCHAIN_DIR }}

    - name: Install Toolchains
      timeout-minutes: 15
      run: |
        # 使用加速镜像下载工具链
        declare -A CLANG_MIRRORS=(
          ["r487747c"]="https://mirror.iscas.ac.cn/kernel-prebuilts/clang-r487747c.tar.gz"
          ["r450784d"]="https://mirror.ustc.edu.cn/android-kernel/clang-r450784d.tgz"
        )

        cd ${{ env.TOOLCHAIN_DIR }}
        if [ -n "${CLANG_MIRRORS[${{ env.CLANG_VERSION }}]}" ]; then
          aria2c -x16 -s16 -k1M "${CLANG_MIRRORS[${{ env.CLANG_VERSION }}]}" -o clang.tar.gz
        else
          echo "::warning ::Using original clang source"
          wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/master-kernel-build-2022/clang-${{ env.CLANG_VERSION }}.tar.gz
        fi

        tar --use-compress-program=pigz -xf clang.tar.gz
        rm clang.tar.gz

        # 验证编译器可用性
        if ! ${{ env.TOOLCHAIN_DIR }}/clang/bin/clang --version; then
          echo "::error ::Clang installation failed"
          exit 103
        fi

    - name: Clone Kernel Source
      run: |
        git clone \
          --depth=1 \
          --branch "${{ env.KERNEL_SOURCE_BRANCH }}" \
          --filter=blob:none \
          --sparse \
          ${{ env.KERNEL_SOURCE }} ${{ env.KERNEL_DIR }}

        cd ${{ env.KERNEL_DIR }}
        git sparse-checkout init --cone
        git sparse-checkout set arch/${{ env.TARGET_ARCH }} drivers include

    - name: Apply Patches
      if: ${{ env.USE_KERNELSU == 'true' }}
      run: |
        cd ${{ env.KERNEL_DIR }}
        curl -sL https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh | bash -
        for p in patches/*.patch; do
          if ! patch -p1 --no-backup-if-mismatch < $p; then
            echo "::error ::Patch failed: $p"
            exit 104
          fi
        done

    - name: Build Kernel
      env:
        LLVM: 1
        CC: clang
        LD: ld.lld
        AR: llvm-ar
        NM: llvm-nm
        OBJCOPY: llvm-objcopy
        OBJDUMP: llvm-objdump
        STRIP: llvm-strip
      run: |
        cd ${{ env.KERNEL_DIR }}
        make O=out ARCH=${{ env.TARGET_ARCH }} ${{ env.KERNEL_DEFCONFIG }}

        # 内存优化编译参数
        make -j$(($(nproc)*2)) O=out ARCH=${{ env.TARGET_ARCH }} \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
          CC="${{ env.TOOLCHAIN_DIR }}/clang/bin/clang" \
          LD="${{ env.TOOLCHAIN_DIR }}/clang/bin/ld.lld" \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          NM="${{ env.TOOLCHAIN_DIR }}/clang/bin/llvm-nm" \
          AR="${{ env.TOOLCHAIN_DIR }}/clang/bin/llvm-ar" \
          STRIP="${{ env.TOOLCHAIN_DIR }}/clang/bin/llvm-strip" \
          OBJCOPY="${{ env.TOOLCHAIN_DIR }}/clang/bin/llvm-objcopy" \
          OBJDUMP="${{ env.TOOLCHAIN_DIR }}/clang/bin/llvm-objdump" \
          KCFLAGS="-pipe -Wno-maybe-uninitialized" \
          KCPPFLAGS="-D__OPTIMIZE__=1" \
          || ( cat out/.config && exit 1 )

        # 验证产物完整性
        if ! file out/arch/${{ env.TARGET_ARCH }}/boot/${{ env.KERNEL_FILE }} | grep -q 'Linux kernel'; then
          echo "::error ::Invalid kernel image"
          exit 105
        fi

    - name: Generate Boot Images
      if: ${{ env.MAKE_BOOT_IMAGE == 'true' }}
      run: |
        python3 mkbootimg.py \
          --kernel ${{ env.KERNEL_DIR }}/out/arch/${{ env.TARGET_ARCH }}/boot/${{ env.KERNEL_FILE }} \
          --ramdisk initramfs.cpio \
          --cmdline 'console=ttyMSM0,115200n8 earlycon=msm_geni_serial,0x4a90000' \
          --base 0x80000000 \
          --pagesize 4096 \
          -o boot.img

        # AVB签名验证
        avbtool add_hash_footer \
          --image boot.img \
          --partition_name boot \
          --partition_size $((64*1024*1024)) \
          --algorithm SHA256_RSA4096 \
          --key keys/verity.pk8 \
          --prop com.android.build.boot.fingerprint:$(date +%s)

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: |
          ${{ env.KERNEL_DIR }}/out/arch/${{ env.TARGET_ARCH }}/boot/*
          boot.img
        retention-days: 7
        if-no-files-found: error

    - name: Cleanup
      if: always()
      run: |
        sudo swapoff /swapfile
        sudo rm /swapfile
        sudo umount ${{ env.TOOLCHAIN_DIR }}
